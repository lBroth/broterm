{"version":3,"sources":["command/index.d.tsx","command/user-agent.tsx","command/geolocation.tsx","command/clear.tsx","command/help.tsx","command/core.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["CommandType","CommandTypeDescription","a","result","navigator","userAgent","command","USERAGENT","UserAgent","func","geolocationResponseToString","json","Object","keys","map","c","replace","join","fetch","response","GEOLOCATION","console","error","Geolocation","CLEAR","Clear","resetHistory","commandTypeToString","packageJson","values","toUpperCase","HELP","Commands","TERMINAL_COMMAND_PREFIX","App","useState","currentCommand","setCurrentCommand","history","setHistory","inputRef","useRef","onChange","event","value","target","onKeyPress","key","debug","trim","foundCommand","filter","length","concat","onClick","currentEl","current","focus","setFocus","className","tabIndex","style","padding","i","role","display","justifyContent","alignItems","flexDirection","whiteSpace","ref","data-testid","autoFocus","margin","marginLeft","fontSize","color","fontFamily","backgroundColor","border","boxShadow","outline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79fe327b.chunk.js","sourcesContent":["export type HistoryObjectType = {\n\tcommand: string\n\tresult: string\n}\n\nexport type CommandObjectType = {\n\tcommand: string\n\tfunc: () => Promise<HistoryObjectType>\n\tresetHistory?: boolean\n}\n\nexport enum CommandType {\n\tHELP = 'help',\n\tCLEAR = 'clear',\n\tGEOLOCATION = 'geolocation',\n\tUSERAGENT = 'useragent'\n}\n\nexport enum CommandTypeDescription {\n\tHELP = 'show all available commands',\n\tCLEAR = 'clear console',\n\tGEOLOCATION = 'get geolocation information',\n\tUSERAGENT = 'show the user agent'\n}\n\n","import {CommandObjectType, CommandType} from \"./index.d\";\n\nasync function func() {\n\treturn {result: navigator.userAgent, command: CommandType.USERAGENT}\n}\n\nconst UserAgent: CommandObjectType = {\n\tcommand: CommandType.USERAGENT,\n\tfunc\n}\nexport default UserAgent","import {CommandObjectType, CommandType} from \"./index.d\";\n\nfunction geolocationResponseToString(json:any) {\n\treturn `Geolocation plugin by ipify.org` +\n\t\tObject.keys(json)\n\t\t\t.map((c) => \"\\n\" + c.replace(\"geoplugin_\", \"\") + \": \" + json[c])\n\t\t\t.join(\"\") +\n\t\t\"\\n\"\n}\n\nasync function func() {\n\ttry {\n\t\tconst response = await fetch('https://api.ipify.org?format=json')\n\t\tconst json = await response.json()\n\t\treturn {result: geolocationResponseToString(json), command: CommandType.GEOLOCATION}\n\t} catch(e) {\n\t\tconsole.error(e);\n\t\t// TODO - throw error\n\t\treturn {result: \"error getting ip info\", command: CommandType.GEOLOCATION}\n\t}\n}\n\nconst Geolocation: CommandObjectType = {\n\tcommand: CommandType.GEOLOCATION,\n\tfunc,\n}\n\nexport default Geolocation","import {CommandObjectType, CommandType} from \"./index.d\";\n\nasync function func() {\n\treturn {result: \"\", command: CommandType.CLEAR}\n}\n\nconst Clear: CommandObjectType = {\n\tcommand: CommandType.CLEAR,\n\tfunc,\n\tresetHistory: true\n}\nexport default Clear","import {CommandObjectType, CommandType, CommandTypeDescription} from \"./index.d\"\nimport * as packageJson from \"../../package.json\"\n\nfunction commandTypeToString() {\n\treturn `${packageJson.name} version ${packageJson.version}\\n` +\n\t\t\"Available commands:\" +\n\t\tObject.values(CommandType)\n\t\t// @ts-ignore // TODO - refactor next line\n\t\t.map((c) => \"\\n - \" + c + \": \" + CommandTypeDescription[c.toUpperCase()])\n\t\t.join(\"\") +\n\t\t\"\\n\"\n}\n\nasync function func() {\n\treturn {result: commandTypeToString(), command: CommandType.HELP}\n}\n\nconst Help: CommandObjectType = {\n\tcommand: CommandType.HELP,\n\tfunc\n}\nexport default Help","import UserAgent from \"./user-agent\";\nimport Geolocation from \"./geolocation\";\nimport Clear from \"./clear\";\nimport Help from \"./help\";\n\nconst Commands = [Geolocation, Clear, UserAgent, Help]\n\n\nexport default Commands","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useRef, useState} from 'react'\nimport './App.css'\nimport Commands from '../command/core'\nimport {HistoryObjectType} from \"../command/index.d\"\nimport * as packageJson from \"../../package.json\"\n\nconst TERMINAL_COMMAND_PREFIX = `${packageJson.name} ~ % `\n\n\nfunction App() {\n  const [currentCommand, setCurrentCommand] = useState(\"\");\n  const [history, setHistory] = useState<HistoryObjectType[]>([])\n  // const [historyPointer, setHistoryPointer] = useState<number>(1)\n  const inputRef = useRef<HTMLInputElement>();\n  const setFocus = (): void => {\n    const currentEl = inputRef.current;\n    if (currentEl) {\n      currentEl.focus();\n    }\n  };\n\n  /*useEffect(() => {\n    if (historyPointer > 0) {\n      setCurrentCommand(history[historyPointer].command)\n    }\n  }, [historyPointer])*/\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n      const value = event.target.value\n      setCurrentCommand(value)\n  }\n\n  const onKeyPress = async (event: KeyboardEvent<HTMLInputElement>) => {\n    if(event.key === 'Enter') {\n      console.debug(event, currentCommand);\n      if (currentCommand.trim() === \"\") {\n        // empty command\n        // setHistory(history.concat([{result: \"\", command: \"\"}]))\n      } else {\n        // search for command\n        const foundCommand = Commands.filter((c) => c.command === currentCommand.trim());\n        if (foundCommand.length > 0) {\n          // command found\n          if (foundCommand[0].resetHistory) {\n            setHistory([])\n          } else {\n            setHistory(history.concat([{result: (await foundCommand[0].func()).result, command: currentCommand.trim()}]))\n          }\n        } else {\n          // command not found\n          setHistory(history.concat([{ result: `command not found: ${currentCommand}`, command: currentCommand.trim()}]))\n        }\n      }\n      setCurrentCommand(\"\")\n    }\n  }\n  /*const onKeyUp = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"ArrowUp\") {\n      if (history.length > 0) {\n        setHistoryPointer(history.length - historyPointer)\n      }\n    } else if (event.key === \"ArrowDown\") {\n\n    }\n  }*/\n\n  const renderInput = () => {\n    return <input\n        // @ts-ignore\n          ref={inputRef}\n          data-testid={\"broterm-input\"}\n          value={currentCommand}\n          onChange={onChange}\n          autoFocus={true}\n          // onKeyDown={onKeyDown}\n          style={{\n              margin: 0,\n              marginLeft: 10,\n              fontSize: 16,\n              color: \"#00ff00\",\n              fontFamily: \"courier new\",\n              backgroundColor: \"#000\",\n              border: \"0px solid #000\",\n              padding: 0,\n              boxShadow: 'none',\n              outline: 'none'\n          }}\n      />\n  }\n\n  return (\n      <div\n          onClick={() => setFocus()}\n          className=\"terminal\"\n          tabIndex={0}\n          onKeyPress={onKeyPress}\n          // onKeyUp={onKeyUp}\n      >\n              <div style={{padding: 8}}>\n                  {\n                      history.map((c, i) => {\n                          return (\n                              <div role=\"line\" key={`${c.command}_${i}`} style={{display:\"flex\", justifyContent: \"left\", alignItems: \"left\", flexDirection: \"column\"}}>\n                                  <span>{TERMINAL_COMMAND_PREFIX + c.command}</span>\n                                  <span style={{whiteSpace: \"pre-wrap\"}}>{c.result}</span>\n                              </div>\n                          )\n                      })\n                  }\n                  {\n                      <div role=\"last-line\" style={{display:\"flex\", justifyContent: \"left\", alignItems: \"left\"}}>\n                          <span>{TERMINAL_COMMAND_PREFIX}</span>\n                          <span>{renderInput()}</span>\n                      </div>\n                  }\n              </div>\n      </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}