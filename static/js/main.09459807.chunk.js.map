{"version":3,"sources":["command/index.d.tsx","command/ip.tsx","command/clear.tsx","command/help.tsx","command/useragent.tsx","command/secret.tsx","command/about.tsx","command/covid.tsx","command/core.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["CommandType","CommandTypeDescription","geolocationResponseToString","json","Object","keys","map","c","replace","join","a","fetch","response","result","command","IP","console","error","Ip","type","description","func","CLEAR","Clear","resetHistory","commandTypeToString","packageJson","values","Commands","argsDescription","HELP","Help","navigator","userAgent","USERAGENT","UserAgent","args","size","length","parseInt","nanoid","SECRET","Secret","about","url","About","ABOUT","ignoreObjectKeys","covidResponseToString","res","Countries","objectToString","filter","Country","toLowerCase","Global","COVID","obj","c1","indexOf","TERMINAL_COMMAND_PREFIX","App","useState","currentCommand","setCurrentCommand","history","setHistory","inputRef","useRef","useEffect","currentEl","current","scrollIntoView","behavior","onChange","event","value","target","onKeyPress","key","split","shift","trim","foundCommand","concat","className","tabIndex","onClick","focus","setFocus","i","role","style","whiteSpace","ref","data-testid","autoCorrect","autoCapitalize","autoSave","autoFocus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09459807.chunk.js","sourcesContent":["export type HistoryObjectType = {\n\tcommand: string\n\tresult: string\n}\n\nexport type CommandObjectType = {\n\tcommand: Command\n\tfunc: (args?: string[]) => Promise<HistoryObjectType>\n\tresetHistory?: boolean\n}\n\nexport type Command = {\n\ttype: CommandType\n\tdescription: CommandTypeDescription\n\targsDescription?: string\n}\nexport enum CommandType {\n\tHELP = 'help',\n\tCLEAR = 'clear',\n\tIP = 'ip',\n\tUSERAGENT = 'useragent',\n\tSECRET = 'secret',\n\tABOUT = 'about',\n\tCOVID = 'covid'\n}\n\nexport enum CommandTypeDescription {\n\tHELP = 'show all available commands',\n\tCLEAR = 'clear console',\n\tIP = 'print your ip address',\n\tUSERAGENT = 'print your user agent',\n\tSECRET = 'generate secret by nanoid',\n\tABOUT = 'app info',\n\tCOVID = 'get covid info'\n}\n\n","import {CommandObjectType, CommandType, CommandTypeDescription} from \"./index.d\";\n\nfunction geolocationResponseToString(json:any) {\n\treturn `` +\n\t\tObject.keys(json)\n\t\t\t.map((c) => c.replace(\"geoplugin_\", \"\") + \": \" + json[c])\n\t\t\t.join(\"\") +\n\t\t\" by ipify.org\\n\"\n}\n\nasync function func() {\n\ttry {\n\t\tconst response = await fetch('https://api.ipify.org?format=json')\n\t\tconst json = await response.json()\n\t\treturn {result: geolocationResponseToString(json), command: CommandType.IP}\n\t} catch(e) {\n\t\tconsole.error(e);\n\t\t// TODO - throw error\n\t\treturn {result: \"error getting ip info\", command: CommandType.IP}\n\t}\n}\n\nconst Ip: CommandObjectType = {\n\tcommand: { type: CommandType.IP, description: CommandTypeDescription.IP },\n\tfunc,\n}\n\nexport default Ip","import {CommandObjectType, CommandType, CommandTypeDescription} from \"./index.d\";\n\nasync function func() {\n\treturn {result: \"\", command: CommandType.CLEAR}\n}\n\nconst Clear: CommandObjectType = {\n\tcommand: { type: CommandType.CLEAR, description: CommandTypeDescription.CLEAR },\n\tfunc,\n\tresetHistory: true\n}\nexport default Clear","import {CommandObjectType, CommandType, CommandTypeDescription} from \"./index.d\"\nimport * as packageJson from \"../../package.json\"\nimport Commands from \"./core\";\n\nfunction commandTypeToString() {\n\n\treturn `${packageJson.name} version ${packageJson.version}\\n` +\n\t\t\"Available commands:\" +\n\t\tObject.values(Commands)\n\t\t.map((c) => \"\\n - \" + c.command.type + \": \" + c.command.description + (\n\t\t\t\tc.command.argsDescription ? \"\\n   args:\\n   - \" +c.command.argsDescription : \"\"\n\t\t\t)).join(\"\") +\n\t\t\"\\n\"\n}\n\nasync function func() {\n\treturn {result: commandTypeToString(), command: CommandType.HELP}\n}\n\nconst Help: CommandObjectType = {\n\tcommand: { type: CommandType.HELP, description: CommandTypeDescription.HELP },\n\tfunc\n}\nexport default Help","import {CommandObjectType, CommandType, CommandTypeDescription} from \"./index.d\";\n\nasync function func() {\n\treturn {result: navigator.userAgent, command: CommandType.USERAGENT}\n}\n\nconst UserAgent: CommandObjectType = {\n\tcommand: { type: CommandType.USERAGENT, description: CommandTypeDescription.USERAGENT },\n\tfunc\n}\nexport default UserAgent","import {CommandObjectType, CommandType, CommandTypeDescription} from \"./index.d\";\nimport { nanoid } from 'nanoid'\n\nasync function func(args?: string []) {\n\tconst size = args && args.length > 0 && parseInt(args[0], 10) > 0 ? parseInt(args[0], 10) : 16\n\treturn {result: nanoid(size), command: CommandType.SECRET}\n}\n\nconst Secret: CommandObjectType = {\n\tcommand: { type: CommandType.SECRET, description: CommandTypeDescription.SECRET , argsDescription: \"[optional] size: number default=16 - example command: `secret 10`\"},\n\tfunc,\n\n\n}\nexport default Secret","import {CommandObjectType, CommandType, CommandTypeDescription} from \"./index.d\"\nimport * as packageJson from \"../../package.json\"\n\nfunction about() {\n\treturn `${packageJson.name} version ${packageJson.version} ` +\n\t\t`by ${packageJson.author} ${packageJson.repository.url}`\n}\n\nasync function func() {\n\treturn {result: about(), command: CommandType.HELP}\n}\n\nconst About: CommandObjectType = {\n\tcommand: { type: CommandType.ABOUT, description: CommandTypeDescription.ABOUT },\n\tfunc\n}\nexport default About","import {CommandObjectType, CommandType, CommandTypeDescription} from \"./index.d\";\n\nconst ignoreObjectKeys = ['Premium']\n\nfunction covidResponseToString(json: any, args?: string[]) {\n\tlet res = `Covid19 data by covid19api.com\\n`\n\tif (args && args.length > 0) {\n\t\tswitch(args[0]) {\n\t\t\tcase 'countries':\n\t\t\t\tres += json.Countries.map((c: any) => objectToString(c)).join(\"\\n\")\n\t\t\t\tbreak\n\t\t\tcase 'country':\n\t\t\t\tres += json.Countries.filter((c: any) => c.Country.toLowerCase() === args[1].toLowerCase()).map((c: any) => objectToString(c))\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\t// none\n\t\t\t\t// TODO - trow error unrecognized arg args[0]\n\n\t\t}\n\t} else {\n\t\t// world data\n\t\tres += objectToString(json.Global)\n\t}\n\treturn res\n}\n\nasync function func(args?: string[]) {\n\ttry {\n\t\tconst response = await fetch('https://api.covid19api.com/summary')\n\t\tconst json = await response.json()\n\t\treturn {result: covidResponseToString(json, args), command: CommandType.COVID}\n\t} catch(e) {\n\t\tconsole.error(e);\n\t\t// TODO - throw error\n\t\treturn {result: \"error getting covid info\", command: CommandType.COVID}\n\t}\n}\n\nconst Covid: CommandObjectType = {\n\tcommand: { type: CommandType.COVID, description: CommandTypeDescription.COVID, argsDescription: \"[optional] countries - example command: `covid countries`\\n   - [optional] country - example command: `covid country italy`\"},\n\tfunc,\n}\n\nexport default Covid\n\n\n// TODO - move to utils\nfunction objectToString (obj: any) {\n\t\treturn Object.keys(obj)\n\t\t\t.map((c1) => ignoreObjectKeys.indexOf(c1) === -1 ? \"  \" + c1 + \": \" + obj[c1] + \"\\n\" : \"\")\n\t\t\t.join(\"\")\n}","import Ip from \"./ip\";\nimport Clear from \"./clear\";\nimport Help from \"./help\";\nimport UserAgent from \"./useragent\";\nimport Secret from \"./secret\";\nimport About from \"./about\";\nimport Covid from \"./covid\";\n\nconst Commands = [Ip, Clear, UserAgent, Help, Secret, About, Covid]\n\n\nexport default Commands","import React, {ChangeEvent, KeyboardEvent, useEffect, useRef, useState} from 'react'\nimport './App.css'\nimport Commands from '../command/core'\nimport {HistoryObjectType} from \"../command/index.d\"\nimport * as packageJson from \"../../package.json\"\n\nconst TERMINAL_COMMAND_PREFIX = `${packageJson.name} ~ % `\n\n\nfunction App() {\n  const [currentCommand, setCurrentCommand] = useState(\"\");\n  const [history, setHistory] = useState<HistoryObjectType[]>([])\n  // const [historyPointer, setHistoryPointer] = useState<number>(1)\n  const inputRef = useRef<HTMLInputElement>();\n  const setFocus = (): void => {\n    const currentEl = inputRef.current;\n    if (currentEl) {\n      currentEl.focus();\n    }\n  };\n\n  /*useEffect(() => {\n    if (historyPointer > 0) {\n      setCurrentCommand(history[historyPointer].command)\n    }\n  }, [historyPointer])*/\n\n  useEffect(() => {\n    const currentEl = inputRef.current;\n    if (currentEl) {\n      // console.log(currentEl.clientHeight)\n      // currentEl.scrollTop = currentEl.clientHeight\n      currentEl.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [currentCommand, history])\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n      const value = event.target.value\n      setCurrentCommand(value)\n  }\n\n  const onKeyPress = async (event: KeyboardEvent<HTMLInputElement>) => {\n    if(event.key === 'Enter') {\n      const args = currentCommand.split(\" \")\n      const command = args.shift() || \"\"\n\n      // console.debug(event, currentCommand);\n      if (command.trim() === \"\") {\n        // empty command\n        // setHistory(history.concat([{result: \"\", command: \"\"}]))\n      } else {\n        // search for command\n        const foundCommand = Commands.filter((c) => c.command.type === command.trim());\n        if (foundCommand.length > 0) {\n          // command found\n          if (foundCommand[0].resetHistory) {\n            setHistory([])\n          } else {\n            setHistory(history.concat([{result: (await foundCommand[0].func(args)).result, command: currentCommand}]))\n          }\n        } else {\n          // command not found\n          setHistory(history.concat([{ result: `command not found: ${command.trim()}`, command: currentCommand}]))\n        }\n      }\n      setCurrentCommand(\"\")\n    }\n  }\n  /*const onKeyUp = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"ArrowUp\") {\n      if (history.length > 0) {\n        setHistoryPointer(history.length - historyPointer)\n      }\n    } else if (event.key === \"ArrowDown\") {\n\n    }\n  }*/\n\n  const renderInput = () => {\n    return <input\n        // @ts-ignore\n          ref={inputRef}\n          data-testid={\"broterm-input\"}\n          value={currentCommand}\n          onChange={onChange}\n          type={\"text\"}\n          autoCorrect={'none'}\n          autoCapitalize={'none'}\n          autoSave={'none'}\n          autoFocus\n          // onKeyDown={onKeyDown}\n          className={\"terminal-input\"}\n      />\n  }\n\n  return (\n      <div\n          className=\"terminal\"\n          tabIndex={0}\n          onClick={() => setFocus()}\n          onKeyPress={onKeyPress}\n          // onKeyUp={onKeyUp}\n      >\n              <div className={\"container\"}>\n                  {\n                      history.map((c, i) => {\n                          return (\n                              <div role=\"listitem\" className=\"line\" key={`${c.command}_${i}`}>\n                                  <span>{TERMINAL_COMMAND_PREFIX + c.command}</span>\n                                  <span style={{whiteSpace: \"pre-wrap\"}}>{c.result}</span>\n                              </div>\n                          )\n                      })\n                  }\n                  {\n                      <div role=\"listitem\" className=\"line last\">\n                          <span>{TERMINAL_COMMAND_PREFIX}</span>\n                          <span>{renderInput()}</span>\n                      </div>\n                  }\n              </div>\n      </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}