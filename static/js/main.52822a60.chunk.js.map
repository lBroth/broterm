{"version":3,"sources":["command/index.d.tsx","command/ip.tsx","command/clear.tsx","command/help.tsx","command/useragent.tsx","command/secret.tsx","command/core.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["CommandType","CommandTypeDescription","geolocationResponseToString","json","Object","keys","map","c","replace","join","a","fetch","response","result","command","IP","console","error","Ip","func","CLEAR","Clear","resetHistory","commandTypeToString","packageJson","values","toUpperCase","HELP","Help","navigator","userAgent","USERAGENT","UserAgent","nanoid","SECRET","Commands","TERMINAL_COMMAND_PREFIX","App","useState","currentCommand","setCurrentCommand","history","setHistory","inputRef","useRef","useEffect","currentEl","current","scrollIntoView","behavior","onChange","event","value","target","onKeyPress","key","trim","foundCommand","filter","length","concat","className","tabIndex","onClick","focus","setFocus","i","role","style","whiteSpace","ref","data-testid","type","autoCorrect","autoCapitalize","autoSave","autoFocus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52822a60.chunk.js","sourcesContent":["export type HistoryObjectType = {\n\tcommand: string\n\tresult: string\n}\n\nexport type CommandObjectType = {\n\tcommand: string\n\tfunc: () => Promise<HistoryObjectType>\n\tresetHistory?: boolean\n}\n\nexport enum CommandType {\n\tHELP = 'help',\n\tCLEAR = 'clear',\n\tIP = 'ip',\n\tUSERAGENT = 'useragent',\n\tSECRET = 'secret'\n}\n\nexport enum CommandTypeDescription {\n\tHELP = 'show all available commands',\n\tCLEAR = 'clear console',\n\tIP = 'print your ip address',\n\tUSERAGENT = 'print your user agent',\n\tSECRET = 'generate secret by nanoid'\n}\n\n","import {CommandObjectType, CommandType} from \"./index.d\";\n\nfunction geolocationResponseToString(json:any) {\n\treturn `` +\n\t\tObject.keys(json)\n\t\t\t.map((c) => c.replace(\"geoplugin_\", \"\") + \": \" + json[c])\n\t\t\t.join(\"\") +\n\t\t\" by ipify.org\\n\"\n}\n\nasync function func() {\n\ttry {\n\t\tconst response = await fetch('https://api.ipify.org?format=json')\n\t\tconst json = await response.json()\n\t\treturn {result: geolocationResponseToString(json), command: CommandType.IP}\n\t} catch(e) {\n\t\tconsole.error(e);\n\t\t// TODO - throw error\n\t\treturn {result: \"error getting ip info\", command: CommandType.IP}\n\t}\n}\n\nconst Ip: CommandObjectType = {\n\tcommand: CommandType.IP,\n\tfunc,\n}\n\nexport default Ip","import {CommandObjectType, CommandType} from \"./index.d\";\n\nasync function func() {\n\treturn {result: \"\", command: CommandType.CLEAR}\n}\n\nconst Clear: CommandObjectType = {\n\tcommand: CommandType.CLEAR,\n\tfunc,\n\tresetHistory: true\n}\nexport default Clear","import {CommandObjectType, CommandType, CommandTypeDescription} from \"./index.d\"\nimport * as packageJson from \"../../package.json\"\n\nfunction commandTypeToString() {\n\treturn `${packageJson.name} version ${packageJson.version}\\n` +\n\t\t\"Available commands:\" +\n\t\tObject.values(CommandType)\n\t\t// @ts-ignore // TODO - refactor next line\n\t\t.map((c) => \"\\n - \" + c + \": \" + CommandTypeDescription[c.toUpperCase()])\n\t\t.join(\"\") +\n\t\t\"\\n\"\n}\n\nasync function func() {\n\treturn {result: commandTypeToString(), command: CommandType.HELP}\n}\n\nconst Help: CommandObjectType = {\n\tcommand: CommandType.HELP,\n\tfunc\n}\nexport default Help","import {CommandObjectType, CommandType} from \"./index.d\";\n\nasync function func() {\n\treturn {result: navigator.userAgent, command: CommandType.USERAGENT}\n}\n\nconst UserAgent: CommandObjectType = {\n\tcommand: CommandType.USERAGENT,\n\tfunc\n}\nexport default UserAgent","import {CommandObjectType, CommandType} from \"./index.d\";\nimport { nanoid } from 'nanoid'\n\nasync function func() {\n\treturn {result: nanoid(), command: CommandType.SECRET}\n}\n\nconst Secret: CommandObjectType = {\n\tcommand: CommandType.SECRET,\n\tfunc,\n\n}\nexport default Secret","import Ip from \"./ip\";\nimport Clear from \"./clear\";\nimport Help from \"./help\";\nimport UserAgent from \"./useragent\";\nimport Secret from \"./secret\";\n\nconst Commands = [Ip, Clear, UserAgent, Help, Secret]\n\n\nexport default Commands","import React, {ChangeEvent, KeyboardEvent, useEffect, useRef, useState} from 'react'\nimport './App.css'\nimport Commands from '../command/core'\nimport {HistoryObjectType} from \"../command/index.d\"\nimport * as packageJson from \"../../package.json\"\n\nconst TERMINAL_COMMAND_PREFIX = `${packageJson.name} ~ % `\n\n\nfunction App() {\n  const [currentCommand, setCurrentCommand] = useState(\"\");\n  const [history, setHistory] = useState<HistoryObjectType[]>([])\n  // const [historyPointer, setHistoryPointer] = useState<number>(1)\n  const inputRef = useRef<HTMLInputElement>();\n  const setFocus = (): void => {\n    const currentEl = inputRef.current;\n    if (currentEl) {\n      currentEl.focus();\n    }\n  };\n\n  /*useEffect(() => {\n    if (historyPointer > 0) {\n      setCurrentCommand(history[historyPointer].command)\n    }\n  }, [historyPointer])*/\n\n  useEffect(() => {\n    const currentEl = inputRef.current;\n    if (currentEl) {\n      // console.log(currentEl.clientHeight)\n      // currentEl.scrollTop = currentEl.clientHeight\n      currentEl.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [currentCommand, history])\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n      const value = event.target.value\n      setCurrentCommand(value)\n  }\n\n  const onKeyPress = async (event: KeyboardEvent<HTMLInputElement>) => {\n    if(event.key === 'Enter') {\n      // console.debug(event, currentCommand);\n      if (currentCommand.trim() === \"\") {\n        // empty command\n        // setHistory(history.concat([{result: \"\", command: \"\"}]))\n      } else {\n        // search for command\n        const foundCommand = Commands.filter((c) => c.command === currentCommand.trim());\n        if (foundCommand.length > 0) {\n          // command found\n          if (foundCommand[0].resetHistory) {\n            setHistory([])\n          } else {\n            setHistory(history.concat([{result: (await foundCommand[0].func()).result, command: currentCommand.trim()}]))\n          }\n        } else {\n          // command not found\n          setHistory(history.concat([{ result: `command not found: ${currentCommand}`, command: currentCommand.trim()}]))\n        }\n      }\n      setCurrentCommand(\"\")\n    }\n  }\n  /*const onKeyUp = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"ArrowUp\") {\n      if (history.length > 0) {\n        setHistoryPointer(history.length - historyPointer)\n      }\n    } else if (event.key === \"ArrowDown\") {\n\n    }\n  }*/\n\n  const renderInput = () => {\n    return <input\n        // @ts-ignore\n          ref={inputRef}\n          data-testid={\"broterm-input\"}\n          value={currentCommand}\n          onChange={onChange}\n          type={\"text\"}\n          autoCorrect={'none'}\n          autoCapitalize={'none'}\n          autoSave={'none'}\n          autoFocus\n          // onKeyDown={onKeyDown}\n          className={\"terminal-input\"}\n      />\n  }\n\n  return (\n      <div\n          className=\"terminal\"\n          tabIndex={0}\n          onClick={() => setFocus()}\n          onKeyPress={onKeyPress}\n          // onKeyUp={onKeyUp}\n      >\n              <div className={\"container\"}>\n                  {\n                      history.map((c, i) => {\n                          return (\n                              <div role=\"listitem\" className=\"line\" key={`${c.command}_${i}`}>\n                                  <span>{TERMINAL_COMMAND_PREFIX + c.command}</span>\n                                  <span style={{whiteSpace: \"pre-wrap\"}}>{c.result}</span>\n                              </div>\n                          )\n                      })\n                  }\n                  {\n                      <div role=\"listitem\" className=\"line last\">\n                          <span>{TERMINAL_COMMAND_PREFIX}</span>\n                          <span>{renderInput()}</span>\n                      </div>\n                  }\n              </div>\n      </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}